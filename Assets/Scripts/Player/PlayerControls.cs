//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Player/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Modules"",
            ""id"": ""d1a202f8-4adb-45d2-a190-0a18f57f5da6"",
            ""actions"": [
                {
                    ""name"": ""RotateModule"",
                    ""type"": ""Value"",
                    ""id"": ""a052e65f-2af7-4fdb-a3c5-ddfcd01fac93"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PlaceModule"",
                    ""type"": ""Button"",
                    ""id"": ""340f904c-489c-4876-8fdc-610aae87f74d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DeleteModule"",
                    ""type"": ""Button"",
                    ""id"": ""f5690711-daed-477b-bb2b-847d83a30609"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CancelModulePlacement"",
                    ""type"": ""Button"",
                    ""id"": ""fe0527e3-9359-448a-ac08-d1d050bdfbff"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f300fadf-f128-4aea-ba24-a50f783ad72a"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateModule"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b1f03af0-496e-4fad-8d1a-f8e41897cefb"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlaceModule"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""372fa6d3-d2f2-4973-b3d9-25b198218a83"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DeleteModule"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3b9f64a6-0542-4a9c-84a2-9c031e40bfad"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CancelModulePlacement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Camera"",
            ""id"": ""70319087-c596-41c2-a4a8-f3c37778b66d"",
            ""actions"": [
                {
                    ""name"": ""MoveCamera"",
                    ""type"": ""Value"",
                    ""id"": ""1639cd9f-9ad0-4e9b-ac4b-919c3a10159e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Value"",
                    ""id"": ""5faf370d-da51-4ab7-85b6-a8487b7266b1"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""bb9c223e-8033-4201-a017-5e508f6048cb"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""1ba6f979-fdbe-4e5c-b35a-5d2619e57bdd"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""7c414282-e8f7-405a-a546-6079a18a35e0"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c9aaf845-d081-4caa-b3eb-5db24b023be2"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d48ff881-0765-47fe-8870-3702b9fd048b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""MouseScroll"",
                    ""id"": ""ffe722dc-3727-4867-b616-3824b08eada3"",
                    ""path"": ""1DAxis(whichSideWins=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""cd5cb9be-295f-4702-9646-47afcc22c185"",
                    ""path"": ""<Mouse>/scroll/down"",
                    ""interactions"": """",
                    ""processors"": ""Clamp(min=-1)"",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""7ee11b2f-9c43-445f-8a77-f6192b6bf9b3"",
                    ""path"": ""<Mouse>/scroll/up"",
                    ""interactions"": """",
                    ""processors"": ""Clamp(max=1)"",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Modules
        m_Modules = asset.FindActionMap("Modules", throwIfNotFound: true);
        m_Modules_RotateModule = m_Modules.FindAction("RotateModule", throwIfNotFound: true);
        m_Modules_PlaceModule = m_Modules.FindAction("PlaceModule", throwIfNotFound: true);
        m_Modules_DeleteModule = m_Modules.FindAction("DeleteModule", throwIfNotFound: true);
        m_Modules_CancelModulePlacement = m_Modules.FindAction("CancelModulePlacement", throwIfNotFound: true);
        // Camera
        m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
        m_Camera_MoveCamera = m_Camera.FindAction("MoveCamera", throwIfNotFound: true);
        m_Camera_Zoom = m_Camera.FindAction("Zoom", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Modules
    private readonly InputActionMap m_Modules;
    private List<IModulesActions> m_ModulesActionsCallbackInterfaces = new List<IModulesActions>();
    private readonly InputAction m_Modules_RotateModule;
    private readonly InputAction m_Modules_PlaceModule;
    private readonly InputAction m_Modules_DeleteModule;
    private readonly InputAction m_Modules_CancelModulePlacement;
    public struct ModulesActions
    {
        private @PlayerControls m_Wrapper;
        public ModulesActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @RotateModule => m_Wrapper.m_Modules_RotateModule;
        public InputAction @PlaceModule => m_Wrapper.m_Modules_PlaceModule;
        public InputAction @DeleteModule => m_Wrapper.m_Modules_DeleteModule;
        public InputAction @CancelModulePlacement => m_Wrapper.m_Modules_CancelModulePlacement;
        public InputActionMap Get() { return m_Wrapper.m_Modules; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ModulesActions set) { return set.Get(); }
        public void AddCallbacks(IModulesActions instance)
        {
            if (instance == null || m_Wrapper.m_ModulesActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ModulesActionsCallbackInterfaces.Add(instance);
            @RotateModule.started += instance.OnRotateModule;
            @RotateModule.performed += instance.OnRotateModule;
            @RotateModule.canceled += instance.OnRotateModule;
            @PlaceModule.started += instance.OnPlaceModule;
            @PlaceModule.performed += instance.OnPlaceModule;
            @PlaceModule.canceled += instance.OnPlaceModule;
            @DeleteModule.started += instance.OnDeleteModule;
            @DeleteModule.performed += instance.OnDeleteModule;
            @DeleteModule.canceled += instance.OnDeleteModule;
            @CancelModulePlacement.started += instance.OnCancelModulePlacement;
            @CancelModulePlacement.performed += instance.OnCancelModulePlacement;
            @CancelModulePlacement.canceled += instance.OnCancelModulePlacement;
        }

        private void UnregisterCallbacks(IModulesActions instance)
        {
            @RotateModule.started -= instance.OnRotateModule;
            @RotateModule.performed -= instance.OnRotateModule;
            @RotateModule.canceled -= instance.OnRotateModule;
            @PlaceModule.started -= instance.OnPlaceModule;
            @PlaceModule.performed -= instance.OnPlaceModule;
            @PlaceModule.canceled -= instance.OnPlaceModule;
            @DeleteModule.started -= instance.OnDeleteModule;
            @DeleteModule.performed -= instance.OnDeleteModule;
            @DeleteModule.canceled -= instance.OnDeleteModule;
            @CancelModulePlacement.started -= instance.OnCancelModulePlacement;
            @CancelModulePlacement.performed -= instance.OnCancelModulePlacement;
            @CancelModulePlacement.canceled -= instance.OnCancelModulePlacement;
        }

        public void RemoveCallbacks(IModulesActions instance)
        {
            if (m_Wrapper.m_ModulesActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IModulesActions instance)
        {
            foreach (var item in m_Wrapper.m_ModulesActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ModulesActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ModulesActions @Modules => new ModulesActions(this);

    // Camera
    private readonly InputActionMap m_Camera;
    private List<ICameraActions> m_CameraActionsCallbackInterfaces = new List<ICameraActions>();
    private readonly InputAction m_Camera_MoveCamera;
    private readonly InputAction m_Camera_Zoom;
    public struct CameraActions
    {
        private @PlayerControls m_Wrapper;
        public CameraActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveCamera => m_Wrapper.m_Camera_MoveCamera;
        public InputAction @Zoom => m_Wrapper.m_Camera_Zoom;
        public InputActionMap Get() { return m_Wrapper.m_Camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        public void AddCallbacks(ICameraActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraActionsCallbackInterfaces.Add(instance);
            @MoveCamera.started += instance.OnMoveCamera;
            @MoveCamera.performed += instance.OnMoveCamera;
            @MoveCamera.canceled += instance.OnMoveCamera;
            @Zoom.started += instance.OnZoom;
            @Zoom.performed += instance.OnZoom;
            @Zoom.canceled += instance.OnZoom;
        }

        private void UnregisterCallbacks(ICameraActions instance)
        {
            @MoveCamera.started -= instance.OnMoveCamera;
            @MoveCamera.performed -= instance.OnMoveCamera;
            @MoveCamera.canceled -= instance.OnMoveCamera;
            @Zoom.started -= instance.OnZoom;
            @Zoom.performed -= instance.OnZoom;
            @Zoom.canceled -= instance.OnZoom;
        }

        public void RemoveCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraActions @Camera => new CameraActions(this);
    public interface IModulesActions
    {
        void OnRotateModule(InputAction.CallbackContext context);
        void OnPlaceModule(InputAction.CallbackContext context);
        void OnDeleteModule(InputAction.CallbackContext context);
        void OnCancelModulePlacement(InputAction.CallbackContext context);
    }
    public interface ICameraActions
    {
        void OnMoveCamera(InputAction.CallbackContext context);
        void OnZoom(InputAction.CallbackContext context);
    }
}
